Dear Android Security Team,

I think I've found an important security flaw in the new keystore service
introduced in ICS and developed since then.

I'll try to explain this in detail from basics, so sorry if this is a bit
long winded and covers familiar ground.

-----

The keystore service offers key storage and use facilities to apps. It
segregates apps by their linux user id (uid), with the fundamental aim
that one app's keys are never available to another[1]. The keystore
service can be backed by software crypto, or a crypto module running
inside a TEE or SE.

The keystore has the concept of being ‘uninitialised', ‘locked', or
‘unlocked’. If the device has no device-level lock (like a pattern, pin,
or passphrase lockscreen) the keystore is uninitialised. Otherwise, the
keystore is locked on phone boot, and unlocked when the lockscreen is
passed.

Keys stored on the behalf of apps can be encrypted at rest, but this
facility is not available when the keystore service is running in
uninitialised mode.

Android's package manager service allocates uids by package on
installation, from a space between uid 10000 and 19999. Resources owned
by a package's uid are removed during uninstallation, strictly before the
package manager considers that uid for reuse. But, in general, the
package manager avoids immediate reuse of a uid (say, for an immediate
uninstall/install cycle). The state used for this reuse avoidance is lost
when the device is rebooted.

When uninstalling a package, the package manager informs the keystore of
its uid, so that it can delete keys belonging to it (the 'clear_uid'
function). This is so the keystore does not leak keys owned by one app,
with another installed later is coincidentally assigned the same uid.

Unfortunately a logic error in the keystore means for a keystore in the
uninitialised state, clear_uid does nothing[2]. Keys belonging to an
uninstalled app are left on storage.

The implications of this are three-fold (in order of ascending severity):

a) Storage leak: the keys are left on disk forever.
b) Privacy: 'Clear data' for apps which use the keystore does not delete
keys. Malicious apps can therefore persist data here outside the control
of the user (like advertising identifiers, etc.)
c) Security: an app which uses the keystore uncontrollably leaks keys to
apps which later reuse its uid.

-----

POC:

Attached are two trivial apps and source. ‘keystore_generate' generates an
RSA key using AndroidKeyStore. 'keystore_list' lists whatever keys it
finds in its AndroidKeyStore.

Steps to reproduce:

1. Remove lock screen from test device[3].
2. Install keystore_generate, and run it. It will print its uid, and
generate a key. Note down the uid.
3. Uninstall keystore_generate, reinstall and and run it again. Repeat
this step a few times, noting down the uids.
4. Uninstall keystore_generate.
5. Reboot phone. This resets the starting point for pm's free uid search.
6. Install and run keystore_list. Note that:
a) the uid it reports are those you noted occupied by keystore_generate
(not a problem, but you won't get reproduction without this),
b) and keys it reports are ones actually generated by keystore_generate
(big problem!).

The expected behaviour is that keystore_list always reports 'found 0 keys'
even if the uid is reused.

-----

Proposed fix: patch attached.

This change means clear_uid always makes an attempt to delete keys
belonging to a uid irrespective of the keystore's state.

-----

Comments:

This and issue 61989[4] makes me think the behaviour over various
lockscreen settings for keystore hasn't been fully thought about.
Particularly, it's very surprising and unhelpful to delete all the keys
belonging to apps when the user changes any lockscreen setting (even from
'None' to 'None’!).

-----

[1]: "Android now offers a custom Java Security Provider in the KeyStore
facility, called Android Key Store, which allows you to generate and save
private keys that may be seen and used by only your app"

[2]:
1. No PIN/pattern means isKeystoreUnlocked() returns false (in
keystore.cpp); the keystore is in STATE_UNINITIALIZED.
2. generate() and import() work in STATE_UNINITIALIZED, as long as you do
not ask for KEYSTORE_FLAG_ENCRYPTED.
3. pm, on uninstall or clear data, calls down to clear_uid(). But this
does nothing in STATE_UNINITIALIZED.

[3]: This bug is not present if you have a pattern/pin/passphrase lock
(and this is the workaround for the bug, incidentally).

[4] https://code.google.com/p/android/issues/detail?id=61989
